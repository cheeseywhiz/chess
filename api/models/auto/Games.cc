/**
 *
 *  Games.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Games.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string Games::Cols::_game_id = "game_id";
const std::string Games::Cols::_state_id = "state_id";
const std::string Games::Cols::_white = "white";
const std::string Games::Cols::_black = "black";
const std::string Games::Cols::_created = "created";
const std::string Games::primaryKeyName = "game_id";
const bool Games::hasPrimaryKey = true;
const std::string Games::tableName = "games";

const std::vector<typename Games::MetaData> Games::metaData_={
{"game_id","uint64_t","integer",8,0,1,0},
{"state_id","uint64_t","integer",8,0,0,1},
{"white","std::string","varchar",0,0,0,1},
{"black","std::string","varchar",0,0,0,1},
{"created","::trantor::Date","datetime",0,0,0,1}
};
const std::string &Games::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Games::Games(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["game_id"].isNull())
        {
            gameId_=std::make_shared<uint64_t>(r["game_id"].as<uint64_t>());
        }
        if(!r["state_id"].isNull())
        {
            stateId_=std::make_shared<uint64_t>(r["state_id"].as<uint64_t>());
        }
        if(!r["white"].isNull())
        {
            white_=std::make_shared<std::string>(r["white"].as<std::string>());
        }
        if(!r["black"].isNull())
        {
            black_=std::make_shared<std::string>(r["black"].as<std::string>());
        }
        if(!r["created"].isNull())
        {
            auto timeStr = r["created"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            gameId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            stateId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            white_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            black_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

Games::Games(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            gameId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            stateId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            white_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            black_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

Games::Games(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("game_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["game_id"].isNull())
        {
            gameId_=std::make_shared<uint64_t>((uint64_t)pJson["game_id"].asUInt64());
        }
    }
    if(pJson.isMember("state_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["state_id"].isNull())
        {
            stateId_=std::make_shared<uint64_t>((uint64_t)pJson["state_id"].asUInt64());
        }
    }
    if(pJson.isMember("white"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["white"].isNull())
        {
            white_=std::make_shared<std::string>(pJson["white"].asString());
        }
    }
    if(pJson.isMember("black"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["black"].isNull())
        {
            black_=std::make_shared<std::string>(pJson["black"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void Games::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            gameId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            stateId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            white_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            black_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void Games::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("game_id"))
    {
        if(!pJson["game_id"].isNull())
        {
            gameId_=std::make_shared<uint64_t>((uint64_t)pJson["game_id"].asUInt64());
        }
    }
    if(pJson.isMember("state_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["state_id"].isNull())
        {
            stateId_=std::make_shared<uint64_t>((uint64_t)pJson["state_id"].asUInt64());
        }
    }
    if(pJson.isMember("white"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["white"].isNull())
        {
            white_=std::make_shared<std::string>(pJson["white"].asString());
        }
    }
    if(pJson.isMember("black"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["black"].isNull())
        {
            black_=std::make_shared<std::string>(pJson["black"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const uint64_t &Games::getValueOfGameId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(gameId_)
        return *gameId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Games::getGameId() const noexcept
{
    return gameId_;
}
void Games::setGameId(const uint64_t &pGameId) noexcept
{
    gameId_ = std::make_shared<uint64_t>(pGameId);
    dirtyFlag_[0] = true;
}


void Games::setGameIdToNull() noexcept
{
    gameId_.reset();
    dirtyFlag_[0] = true;
}

const typename Games::PrimaryKeyType & Games::getPrimaryKey() const
{
    assert(gameId_);
    return *gameId_;
}

const uint64_t &Games::getValueOfStateId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(stateId_)
        return *stateId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Games::getStateId() const noexcept
{
    return stateId_;
}
void Games::setStateId(const uint64_t &pStateId) noexcept
{
    stateId_ = std::make_shared<uint64_t>(pStateId);
    dirtyFlag_[1] = true;
}




const std::string &Games::getValueOfWhite() const noexcept
{
    const static std::string defaultValue = std::string();
    if(white_)
        return *white_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Games::getWhite() const noexcept
{
    return white_;
}
void Games::setWhite(const std::string &pWhite) noexcept
{
    white_ = std::make_shared<std::string>(pWhite);
    dirtyFlag_[2] = true;
}
void Games::setWhite(std::string &&pWhite) noexcept
{
    white_ = std::make_shared<std::string>(std::move(pWhite));
    dirtyFlag_[2] = true;
}




const std::string &Games::getValueOfBlack() const noexcept
{
    const static std::string defaultValue = std::string();
    if(black_)
        return *black_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Games::getBlack() const noexcept
{
    return black_;
}
void Games::setBlack(const std::string &pBlack) noexcept
{
    black_ = std::make_shared<std::string>(pBlack);
    dirtyFlag_[3] = true;
}
void Games::setBlack(std::string &&pBlack) noexcept
{
    black_ = std::make_shared<std::string>(std::move(pBlack));
    dirtyFlag_[3] = true;
}




const ::trantor::Date &Games::getValueOfCreated() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(created_)
        return *created_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Games::getCreated() const noexcept
{
    return created_;
}
void Games::setCreated(const ::trantor::Date &pCreated) noexcept
{
    created_ = std::make_shared<::trantor::Date>(pCreated);
    dirtyFlag_[4] = true;
}




void Games::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Games::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "game_id",
        "state_id",
        "white",
        "black",
        "created"
    };
    return inCols;
}

void Games::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getGameId())
        {
            binder << getValueOfGameId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStateId())
        {
            binder << getValueOfStateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getWhite())
        {
            binder << getValueOfWhite();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBlack())
        {
            binder << getValueOfBlack();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Games::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Games::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getGameId())
        {
            binder << getValueOfGameId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStateId())
        {
            binder << getValueOfStateId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getWhite())
        {
            binder << getValueOfWhite();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBlack())
        {
            binder << getValueOfBlack();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Games::toJson() const
{
    Json::Value ret;
    if(getGameId())
    {
        ret["game_id"]=(Json::UInt64)getValueOfGameId();
    }
    else
    {
        ret["game_id"]=Json::Value();
    }
    if(getStateId())
    {
        ret["state_id"]=(Json::UInt64)getValueOfStateId();
    }
    else
    {
        ret["state_id"]=Json::Value();
    }
    if(getWhite())
    {
        ret["white"]=getValueOfWhite();
    }
    else
    {
        ret["white"]=Json::Value();
    }
    if(getBlack())
    {
        ret["black"]=getValueOfBlack();
    }
    else
    {
        ret["black"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

Json::Value Games::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getGameId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfGameId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getStateId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfStateId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getWhite())
            {
                ret[pMasqueradingVector[2]]=getValueOfWhite();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getBlack())
            {
                ret[pMasqueradingVector[3]]=getValueOfBlack();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreated())
            {
                ret[pMasqueradingVector[4]]=getCreated()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getGameId())
    {
        ret["game_id"]=(Json::UInt64)getValueOfGameId();
    }
    else
    {
        ret["game_id"]=Json::Value();
    }
    if(getStateId())
    {
        ret["state_id"]=(Json::UInt64)getValueOfStateId();
    }
    else
    {
        ret["state_id"]=Json::Value();
    }
    if(getWhite())
    {
        ret["white"]=getValueOfWhite();
    }
    else
    {
        ret["white"]=Json::Value();
    }
    if(getBlack())
    {
        ret["black"]=getValueOfBlack();
    }
    else
    {
        ret["black"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

bool Games::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("game_id"))
    {
        if(!validJsonOfField(0, "game_id", pJson["game_id"], err, true))
            return false;
    }
    if(pJson.isMember("state_id"))
    {
        if(!validJsonOfField(1, "state_id", pJson["state_id"], err, true))
            return false;
    }
    else
    {
        err="The state_id column cannot be null";
        return false;
    }
    if(pJson.isMember("white"))
    {
        if(!validJsonOfField(2, "white", pJson["white"], err, true))
            return false;
    }
    else
    {
        err="The white column cannot be null";
        return false;
    }
    if(pJson.isMember("black"))
    {
        if(!validJsonOfField(3, "black", pJson["black"], err, true))
            return false;
    }
    else
    {
        err="The black column cannot be null";
        return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(4, "created", pJson["created"], err, true))
            return false;
    }
    return true;
}
bool Games::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    return true;
}
bool Games::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("game_id"))
    {
        if(!validJsonOfField(0, "game_id", pJson["game_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("state_id"))
    {
        if(!validJsonOfField(1, "state_id", pJson["state_id"], err, false))
            return false;
    }
    if(pJson.isMember("white"))
    {
        if(!validJsonOfField(2, "white", pJson["white"], err, false))
            return false;
    }
    if(pJson.isMember("black"))
    {
        if(!validJsonOfField(3, "black", pJson["black"], err, false))
            return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(4, "created", pJson["created"], err, false))
            return false;
    }
    return true;
}
bool Games::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    return true;
}
bool Games::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson, 
                             std::string &err, 
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
