/**
 *
 *  States.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "States.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string States::Cols::_stateId = "stateId";
const std::string States::Cols::_state = "state";
const std::string States::Cols::_player = "player";
const std::string States::Cols::_endgameState = "endgameState";
const std::string States::Cols::_nMoves = "nMoves";
const std::string States::Cols::_whiteCaptures = "whiteCaptures";
const std::string States::Cols::_blackCaptures = "blackCaptures";
const std::string States::Cols::_board = "board";
const std::string States::Cols::_created = "created";
const std::string States::primaryKeyName = "stateId";
const bool States::hasPrimaryKey = true;
const std::string States::tableName = "states";

const std::vector<typename States::MetaData> States::metaData_={
{"stateId","uint64_t","integer",8,0,1,0},
{"state","std::string","varchar",0,0,0,1},
{"player","std::string","varchar",0,0,0,1},
{"endgameState","std::string","varchar",0,0,0,1},
{"nMoves","uint64_t","integer",8,0,0,1},
{"whiteCaptures","std::string","varchar",0,0,0,1},
{"blackCaptures","std::string","varchar",0,0,0,1},
{"board","std::string","varchar",0,0,0,1},
{"created","::trantor::Date","datetime",0,0,0,1}
};
const std::string &States::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
States::States(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>(r["stateId"].as<uint64_t>());
        }
        if(!r["state"].isNull())
        {
            state_=std::make_shared<std::string>(r["state"].as<std::string>());
        }
        if(!r["player"].isNull())
        {
            player_=std::make_shared<std::string>(r["player"].as<std::string>());
        }
        if(!r["endgameState"].isNull())
        {
            endgamestate_=std::make_shared<std::string>(r["endgameState"].as<std::string>());
        }
        if(!r["nMoves"].isNull())
        {
            nmoves_=std::make_shared<uint64_t>(r["nMoves"].as<uint64_t>());
        }
        if(!r["whiteCaptures"].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(r["whiteCaptures"].as<std::string>());
        }
        if(!r["blackCaptures"].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(r["blackCaptures"].as<std::string>());
        }
        if(!r["board"].isNull())
        {
            board_=std::make_shared<std::string>(r["board"].as<std::string>());
        }
        if(!r["created"].isNull())
        {
            auto timeStr = r["created"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            stateid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            state_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            player_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            endgamestate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            nmoves_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            board_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

States::States(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            player_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            endgamestate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            nmoves_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            board_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

States::States(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("stateId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson["stateId"].asUInt64());
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["state"].asString());
        }
    }
    if(pJson.isMember("player"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["player"].isNull())
        {
            player_=std::make_shared<std::string>(pJson["player"].asString());
        }
    }
    if(pJson.isMember("endgameState"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["endgameState"].isNull())
        {
            endgamestate_=std::make_shared<std::string>(pJson["endgameState"].asString());
        }
    }
    if(pJson.isMember("nMoves"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["nMoves"].isNull())
        {
            nmoves_=std::make_shared<uint64_t>((uint64_t)pJson["nMoves"].asUInt64());
        }
    }
    if(pJson.isMember("whiteCaptures"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["whiteCaptures"].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(pJson["whiteCaptures"].asString());
        }
    }
    if(pJson.isMember("blackCaptures"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["blackCaptures"].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(pJson["blackCaptures"].asString());
        }
    }
    if(pJson.isMember("board"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["board"].isNull())
        {
            board_=std::make_shared<std::string>(pJson["board"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void States::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            player_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            endgamestate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            nmoves_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            board_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void States::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("stateId"))
    {
        if(!pJson["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson["stateId"].asUInt64());
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["state"].asString());
        }
    }
    if(pJson.isMember("player"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["player"].isNull())
        {
            player_=std::make_shared<std::string>(pJson["player"].asString());
        }
    }
    if(pJson.isMember("endgameState"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["endgameState"].isNull())
        {
            endgamestate_=std::make_shared<std::string>(pJson["endgameState"].asString());
        }
    }
    if(pJson.isMember("nMoves"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["nMoves"].isNull())
        {
            nmoves_=std::make_shared<uint64_t>((uint64_t)pJson["nMoves"].asUInt64());
        }
    }
    if(pJson.isMember("whiteCaptures"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["whiteCaptures"].isNull())
        {
            whitecaptures_=std::make_shared<std::string>(pJson["whiteCaptures"].asString());
        }
    }
    if(pJson.isMember("blackCaptures"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["blackCaptures"].isNull())
        {
            blackcaptures_=std::make_shared<std::string>(pJson["blackCaptures"].asString());
        }
    }
    if(pJson.isMember("board"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["board"].isNull())
        {
            board_=std::make_shared<std::string>(pJson["board"].asString());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const uint64_t &States::getValueOfStateid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(stateid_)
        return *stateid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &States::getStateid() const noexcept
{
    return stateid_;
}
void States::setStateid(const uint64_t &pStateid) noexcept
{
    stateid_ = std::make_shared<uint64_t>(pStateid);
    dirtyFlag_[0] = true;
}


void States::setStateidToNull() noexcept
{
    stateid_.reset();
    dirtyFlag_[0] = true;
}

const typename States::PrimaryKeyType & States::getPrimaryKey() const
{
    assert(stateid_);
    return *stateid_;
}

const std::string &States::getValueOfState() const noexcept
{
    const static std::string defaultValue = std::string();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getState() const noexcept
{
    return state_;
}
void States::setState(const std::string &pState) noexcept
{
    state_ = std::make_shared<std::string>(pState);
    dirtyFlag_[1] = true;
}
void States::setState(std::string &&pState) noexcept
{
    state_ = std::make_shared<std::string>(std::move(pState));
    dirtyFlag_[1] = true;
}




const std::string &States::getValueOfPlayer() const noexcept
{
    const static std::string defaultValue = std::string();
    if(player_)
        return *player_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getPlayer() const noexcept
{
    return player_;
}
void States::setPlayer(const std::string &pPlayer) noexcept
{
    player_ = std::make_shared<std::string>(pPlayer);
    dirtyFlag_[2] = true;
}
void States::setPlayer(std::string &&pPlayer) noexcept
{
    player_ = std::make_shared<std::string>(std::move(pPlayer));
    dirtyFlag_[2] = true;
}




const std::string &States::getValueOfEndgamestate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(endgamestate_)
        return *endgamestate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getEndgamestate() const noexcept
{
    return endgamestate_;
}
void States::setEndgamestate(const std::string &pEndgamestate) noexcept
{
    endgamestate_ = std::make_shared<std::string>(pEndgamestate);
    dirtyFlag_[3] = true;
}
void States::setEndgamestate(std::string &&pEndgamestate) noexcept
{
    endgamestate_ = std::make_shared<std::string>(std::move(pEndgamestate));
    dirtyFlag_[3] = true;
}




const uint64_t &States::getValueOfNmoves() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(nmoves_)
        return *nmoves_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &States::getNmoves() const noexcept
{
    return nmoves_;
}
void States::setNmoves(const uint64_t &pNmoves) noexcept
{
    nmoves_ = std::make_shared<uint64_t>(pNmoves);
    dirtyFlag_[4] = true;
}




const std::string &States::getValueOfWhitecaptures() const noexcept
{
    const static std::string defaultValue = std::string();
    if(whitecaptures_)
        return *whitecaptures_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getWhitecaptures() const noexcept
{
    return whitecaptures_;
}
void States::setWhitecaptures(const std::string &pWhitecaptures) noexcept
{
    whitecaptures_ = std::make_shared<std::string>(pWhitecaptures);
    dirtyFlag_[5] = true;
}
void States::setWhitecaptures(std::string &&pWhitecaptures) noexcept
{
    whitecaptures_ = std::make_shared<std::string>(std::move(pWhitecaptures));
    dirtyFlag_[5] = true;
}




const std::string &States::getValueOfBlackcaptures() const noexcept
{
    const static std::string defaultValue = std::string();
    if(blackcaptures_)
        return *blackcaptures_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getBlackcaptures() const noexcept
{
    return blackcaptures_;
}
void States::setBlackcaptures(const std::string &pBlackcaptures) noexcept
{
    blackcaptures_ = std::make_shared<std::string>(pBlackcaptures);
    dirtyFlag_[6] = true;
}
void States::setBlackcaptures(std::string &&pBlackcaptures) noexcept
{
    blackcaptures_ = std::make_shared<std::string>(std::move(pBlackcaptures));
    dirtyFlag_[6] = true;
}




const std::string &States::getValueOfBoard() const noexcept
{
    const static std::string defaultValue = std::string();
    if(board_)
        return *board_;
    return defaultValue;
}
const std::shared_ptr<std::string> &States::getBoard() const noexcept
{
    return board_;
}
void States::setBoard(const std::string &pBoard) noexcept
{
    board_ = std::make_shared<std::string>(pBoard);
    dirtyFlag_[7] = true;
}
void States::setBoard(std::string &&pBoard) noexcept
{
    board_ = std::make_shared<std::string>(std::move(pBoard));
    dirtyFlag_[7] = true;
}




const ::trantor::Date &States::getValueOfCreated() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(created_)
        return *created_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &States::getCreated() const noexcept
{
    return created_;
}
void States::setCreated(const ::trantor::Date &pCreated) noexcept
{
    created_ = std::make_shared<::trantor::Date>(pCreated);
    dirtyFlag_[8] = true;
}




void States::updateId(const uint64_t id)
{
}

const std::vector<std::string> &States::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "stateId",
        "state",
        "player",
        "endgameState",
        "nMoves",
        "whiteCaptures",
        "blackCaptures",
        "board",
        "created"
    };
    return inCols;
}

void States::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getStateid())
        {
            binder << getValueOfStateid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPlayer())
        {
            binder << getValueOfPlayer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEndgamestate())
        {
            binder << getValueOfEndgamestate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getNmoves())
        {
            binder << getValueOfNmoves();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getWhitecaptures())
        {
            binder << getValueOfWhitecaptures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBlackcaptures())
        {
            binder << getValueOfBlackcaptures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBoard())
        {
            binder << getValueOfBoard();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> States::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void States::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getStateid())
        {
            binder << getValueOfStateid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPlayer())
        {
            binder << getValueOfPlayer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getEndgamestate())
        {
            binder << getValueOfEndgamestate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getNmoves())
        {
            binder << getValueOfNmoves();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getWhitecaptures())
        {
            binder << getValueOfWhitecaptures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBlackcaptures())
        {
            binder << getValueOfBlackcaptures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBoard())
        {
            binder << getValueOfBoard();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value States::toJson() const
{
    Json::Value ret;
    if(getStateid())
    {
        ret["stateId"]=(Json::UInt64)getValueOfStateid();
    }
    else
    {
        ret["stateId"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getPlayer())
    {
        ret["player"]=getValueOfPlayer();
    }
    else
    {
        ret["player"]=Json::Value();
    }
    if(getEndgamestate())
    {
        ret["endgameState"]=getValueOfEndgamestate();
    }
    else
    {
        ret["endgameState"]=Json::Value();
    }
    if(getNmoves())
    {
        ret["nMoves"]=(Json::UInt64)getValueOfNmoves();
    }
    else
    {
        ret["nMoves"]=Json::Value();
    }
    if(getWhitecaptures())
    {
        ret["whiteCaptures"]=getValueOfWhitecaptures();
    }
    else
    {
        ret["whiteCaptures"]=Json::Value();
    }
    if(getBlackcaptures())
    {
        ret["blackCaptures"]=getValueOfBlackcaptures();
    }
    else
    {
        ret["blackCaptures"]=Json::Value();
    }
    if(getBoard())
    {
        ret["board"]=getValueOfBoard();
    }
    else
    {
        ret["board"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

Json::Value States::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getStateid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfStateid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[1]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPlayer())
            {
                ret[pMasqueradingVector[2]]=getValueOfPlayer();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getEndgamestate())
            {
                ret[pMasqueradingVector[3]]=getValueOfEndgamestate();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getNmoves())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfNmoves();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getWhitecaptures())
            {
                ret[pMasqueradingVector[5]]=getValueOfWhitecaptures();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getBlackcaptures())
            {
                ret[pMasqueradingVector[6]]=getValueOfBlackcaptures();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBoard())
            {
                ret[pMasqueradingVector[7]]=getValueOfBoard();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCreated())
            {
                ret[pMasqueradingVector[8]]=getCreated()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getStateid())
    {
        ret["stateId"]=(Json::UInt64)getValueOfStateid();
    }
    else
    {
        ret["stateId"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getPlayer())
    {
        ret["player"]=getValueOfPlayer();
    }
    else
    {
        ret["player"]=Json::Value();
    }
    if(getEndgamestate())
    {
        ret["endgameState"]=getValueOfEndgamestate();
    }
    else
    {
        ret["endgameState"]=Json::Value();
    }
    if(getNmoves())
    {
        ret["nMoves"]=(Json::UInt64)getValueOfNmoves();
    }
    else
    {
        ret["nMoves"]=Json::Value();
    }
    if(getWhitecaptures())
    {
        ret["whiteCaptures"]=getValueOfWhitecaptures();
    }
    else
    {
        ret["whiteCaptures"]=Json::Value();
    }
    if(getBlackcaptures())
    {
        ret["blackCaptures"]=getValueOfBlackcaptures();
    }
    else
    {
        ret["blackCaptures"]=Json::Value();
    }
    if(getBoard())
    {
        ret["board"]=getValueOfBoard();
    }
    else
    {
        ret["board"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

bool States::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("stateId"))
    {
        if(!validJsonOfField(0, "stateId", pJson["stateId"], err, true))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(1, "state", pJson["state"], err, true))
            return false;
    }
    else
    {
        err="The state column cannot be null";
        return false;
    }
    if(pJson.isMember("player"))
    {
        if(!validJsonOfField(2, "player", pJson["player"], err, true))
            return false;
    }
    else
    {
        err="The player column cannot be null";
        return false;
    }
    if(pJson.isMember("endgameState"))
    {
        if(!validJsonOfField(3, "endgameState", pJson["endgameState"], err, true))
            return false;
    }
    else
    {
        err="The endgameState column cannot be null";
        return false;
    }
    if(pJson.isMember("nMoves"))
    {
        if(!validJsonOfField(4, "nMoves", pJson["nMoves"], err, true))
            return false;
    }
    else
    {
        err="The nMoves column cannot be null";
        return false;
    }
    if(pJson.isMember("whiteCaptures"))
    {
        if(!validJsonOfField(5, "whiteCaptures", pJson["whiteCaptures"], err, true))
            return false;
    }
    else
    {
        err="The whiteCaptures column cannot be null";
        return false;
    }
    if(pJson.isMember("blackCaptures"))
    {
        if(!validJsonOfField(6, "blackCaptures", pJson["blackCaptures"], err, true))
            return false;
    }
    else
    {
        err="The blackCaptures column cannot be null";
        return false;
    }
    if(pJson.isMember("board"))
    {
        if(!validJsonOfField(7, "board", pJson["board"], err, true))
            return false;
    }
    else
    {
        err="The board column cannot be null";
        return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(8, "created", pJson["created"], err, true))
            return false;
    }
    return true;
}
bool States::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    return true;
}
bool States::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("stateId"))
    {
        if(!validJsonOfField(0, "stateId", pJson["stateId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(1, "state", pJson["state"], err, false))
            return false;
    }
    if(pJson.isMember("player"))
    {
        if(!validJsonOfField(2, "player", pJson["player"], err, false))
            return false;
    }
    if(pJson.isMember("endgameState"))
    {
        if(!validJsonOfField(3, "endgameState", pJson["endgameState"], err, false))
            return false;
    }
    if(pJson.isMember("nMoves"))
    {
        if(!validJsonOfField(4, "nMoves", pJson["nMoves"], err, false))
            return false;
    }
    if(pJson.isMember("whiteCaptures"))
    {
        if(!validJsonOfField(5, "whiteCaptures", pJson["whiteCaptures"], err, false))
            return false;
    }
    if(pJson.isMember("blackCaptures"))
    {
        if(!validJsonOfField(6, "blackCaptures", pJson["blackCaptures"], err, false))
            return false;
    }
    if(pJson.isMember("board"))
    {
        if(!validJsonOfField(7, "board", pJson["board"], err, false))
            return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(8, "created", pJson["created"], err, false))
            return false;
    }
    return true;
}
bool States::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    return true;
}
bool States::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson, 
                              std::string &err, 
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
