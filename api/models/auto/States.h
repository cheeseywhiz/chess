/**
 *
 *  States.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3 
{

class States
{
  public:
    struct Cols
    {
        static const std::string _stateId;
        static const std::string _state;
        static const std::string _player;
        static const std::string _endgameState;
        static const std::string _nMoves;
        static const std::string _whiteCaptures;
        static const std::string _blackCaptures;
        static const std::string _board;
        static const std::string _created;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit States(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit States(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    States(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    States() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column stateId  */
    ///Get the value of the column stateId, returns the default value if the column is null
    const uint64_t &getValueOfStateid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getStateid() const noexcept;

    ///Set the value of the column stateId
    void setStateid(const uint64_t &pStateid) noexcept;
    void setStateidToNull() noexcept;


    /**  For column state  */
    ///Get the value of the column state, returns the default value if the column is null
    const std::string &getValueOfState() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getState() const noexcept;

    ///Set the value of the column state
    void setState(const std::string &pState) noexcept;
    void setState(std::string &&pState) noexcept;


    /**  For column player  */
    ///Get the value of the column player, returns the default value if the column is null
    const std::string &getValueOfPlayer() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlayer() const noexcept;

    ///Set the value of the column player
    void setPlayer(const std::string &pPlayer) noexcept;
    void setPlayer(std::string &&pPlayer) noexcept;


    /**  For column endgameState  */
    ///Get the value of the column endgameState, returns the default value if the column is null
    const std::string &getValueOfEndgamestate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEndgamestate() const noexcept;

    ///Set the value of the column endgameState
    void setEndgamestate(const std::string &pEndgamestate) noexcept;
    void setEndgamestate(std::string &&pEndgamestate) noexcept;


    /**  For column nMoves  */
    ///Get the value of the column nMoves, returns the default value if the column is null
    const uint64_t &getValueOfNmoves() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getNmoves() const noexcept;

    ///Set the value of the column nMoves
    void setNmoves(const uint64_t &pNmoves) noexcept;


    /**  For column whiteCaptures  */
    ///Get the value of the column whiteCaptures, returns the default value if the column is null
    const std::string &getValueOfWhitecaptures() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getWhitecaptures() const noexcept;

    ///Set the value of the column whiteCaptures
    void setWhitecaptures(const std::string &pWhitecaptures) noexcept;
    void setWhitecaptures(std::string &&pWhitecaptures) noexcept;


    /**  For column blackCaptures  */
    ///Get the value of the column blackCaptures, returns the default value if the column is null
    const std::string &getValueOfBlackcaptures() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBlackcaptures() const noexcept;

    ///Set the value of the column blackCaptures
    void setBlackcaptures(const std::string &pBlackcaptures) noexcept;
    void setBlackcaptures(std::string &&pBlackcaptures) noexcept;


    /**  For column board  */
    ///Get the value of the column board, returns the default value if the column is null
    const std::string &getValueOfBoard() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBoard() const noexcept;

    ///Set the value of the column board
    void setBoard(const std::string &pBoard) noexcept;
    void setBoard(std::string &&pBoard) noexcept;


    /**  For column created  */
    ///Get the value of the column created, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreated() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreated() const noexcept;

    ///Set the value of the column created
    void setCreated(const ::trantor::Date &pCreated) noexcept;



    static size_t getColumnNumber() noexcept {  return 9;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<States>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> stateid_;
    std::shared_ptr<std::string> state_;
    std::shared_ptr<std::string> player_;
    std::shared_ptr<std::string> endgamestate_;
    std::shared_ptr<uint64_t> nmoves_;
    std::shared_ptr<std::string> whitecaptures_;
    std::shared_ptr<std::string> blackcaptures_;
    std::shared_ptr<std::string> board_;
    std::shared_ptr<::trantor::Date> created_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[9]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where stateId = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where stateId = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "stateId,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "state,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "player,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "endgameState,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "nMoves,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "whiteCaptures,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "blackCaptures,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "board,";
            ++parametersCount;
        }
        sql += "created,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[0])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace sqlite3
} // namespace drogon_model
