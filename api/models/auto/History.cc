/**
 *
 *  History.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "History.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string History::Cols::_gameId = "gameId";
const std::string History::Cols::_stateId = "stateId";
const std::string History::Cols::_created = "created";
const std::string History::primaryKeyName = "gameId";
const bool History::hasPrimaryKey = true;
const std::string History::tableName = "history";

const std::vector<typename History::MetaData> History::metaData_={
{"gameId","uint64_t","integer",8,0,1,1},
{"stateId","uint64_t","integer",8,0,0,1},
{"created","::trantor::Date","datetime",0,0,0,1}
};
const std::string &History::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
History::History(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["gameId"].isNull())
        {
            gameid_=std::make_shared<uint64_t>(r["gameId"].as<uint64_t>());
        }
        if(!r["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>(r["stateId"].as<uint64_t>());
        }
        if(!r["created"].isNull())
        {
            auto timeStr = r["created"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            gameid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            stateid_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

History::History(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            gameid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

History::History(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("gameId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["gameId"].isNull())
        {
            gameid_=std::make_shared<uint64_t>((uint64_t)pJson["gameId"].asUInt64());
        }
    }
    if(pJson.isMember("stateId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson["stateId"].asUInt64());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void History::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            gameid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void History::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("gameId"))
    {
        if(!pJson["gameId"].isNull())
        {
            gameid_=std::make_shared<uint64_t>((uint64_t)pJson["gameId"].asUInt64());
        }
    }
    if(pJson.isMember("stateId"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["stateId"].isNull())
        {
            stateid_=std::make_shared<uint64_t>((uint64_t)pJson["stateId"].asUInt64());
        }
    }
    if(pJson.isMember("created"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["created"].isNull())
        {
            auto timeStr = pJson["created"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            created_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const uint64_t &History::getValueOfGameid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(gameid_)
        return *gameid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getGameid() const noexcept
{
    return gameid_;
}
void History::setGameid(const uint64_t &pGameid) noexcept
{
    gameid_ = std::make_shared<uint64_t>(pGameid);
    dirtyFlag_[0] = true;
}



const typename History::PrimaryKeyType & History::getPrimaryKey() const
{
    assert(gameid_);
    return *gameid_;
}

const uint64_t &History::getValueOfStateid() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(stateid_)
        return *stateid_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getStateid() const noexcept
{
    return stateid_;
}
void History::setStateid(const uint64_t &pStateid) noexcept
{
    stateid_ = std::make_shared<uint64_t>(pStateid);
    dirtyFlag_[1] = true;
}




const ::trantor::Date &History::getValueOfCreated() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(created_)
        return *created_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &History::getCreated() const noexcept
{
    return created_;
}
void History::setCreated(const ::trantor::Date &pCreated) noexcept
{
    created_ = std::make_shared<::trantor::Date>(pCreated);
    dirtyFlag_[2] = true;
}




void History::updateId(const uint64_t id)
{
}

const std::vector<std::string> &History::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "gameId",
        "stateId",
        "created"
    };
    return inCols;
}

void History::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getGameid())
        {
            binder << getValueOfGameid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStateid())
        {
            binder << getValueOfStateid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> History::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void History::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getGameid())
        {
            binder << getValueOfGameid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getStateid())
        {
            binder << getValueOfStateid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreated())
        {
            binder << getValueOfCreated();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value History::toJson() const
{
    Json::Value ret;
    if(getGameid())
    {
        ret["gameId"]=(Json::UInt64)getValueOfGameid();
    }
    else
    {
        ret["gameId"]=Json::Value();
    }
    if(getStateid())
    {
        ret["stateId"]=(Json::UInt64)getValueOfStateid();
    }
    else
    {
        ret["stateId"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

Json::Value History::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getGameid())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfGameid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getStateid())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfStateid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCreated())
            {
                ret[pMasqueradingVector[2]]=getCreated()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getGameid())
    {
        ret["gameId"]=(Json::UInt64)getValueOfGameid();
    }
    else
    {
        ret["gameId"]=Json::Value();
    }
    if(getStateid())
    {
        ret["stateId"]=(Json::UInt64)getValueOfStateid();
    }
    else
    {
        ret["stateId"]=Json::Value();
    }
    if(getCreated())
    {
        ret["created"]=getCreated()->toDbStringLocal();
    }
    else
    {
        ret["created"]=Json::Value();
    }
    return ret;
}

bool History::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("gameId"))
    {
        if(!validJsonOfField(0, "gameId", pJson["gameId"], err, true))
            return false;
    }
    else
    {
        err="The gameId column cannot be null";
        return false;
    }
    if(pJson.isMember("stateId"))
    {
        if(!validJsonOfField(1, "stateId", pJson["stateId"], err, true))
            return false;
    }
    else
    {
        err="The stateId column cannot be null";
        return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(2, "created", pJson["created"], err, true))
            return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    return true;
}
bool History::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("gameId"))
    {
        if(!validJsonOfField(0, "gameId", pJson["gameId"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("stateId"))
    {
        if(!validJsonOfField(1, "stateId", pJson["stateId"], err, false))
            return false;
    }
    if(pJson.isMember("created"))
    {
        if(!validJsonOfField(2, "created", pJson["created"], err, false))
            return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    return true;
}
bool History::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
